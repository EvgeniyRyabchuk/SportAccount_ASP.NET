// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportAccountApi.Models;

namespace SportAccountApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupUser");

                    b.HasData(
                        new
                        {
                            GroupsId = 1,
                            UsersId = 2
                        },
                        new
                        {
                            GroupsId = 1,
                            UsersId = 3
                        },
                        new
                        {
                            GroupsId = 2,
                            UsersId = 4
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GR-1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GR-2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GR-3"
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Phones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 982885884,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Number = 982881234,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Number = 982348884,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Number = 982685784,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Number = 982834884,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Client"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coach"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AreaSize")
                        .HasColumnType("smallint");

                    b.Property<short>("Floor")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaSize = (short)20,
                            Floor = (short)2,
                            Name = "Large Dance Room",
                            Number = 201
                        },
                        new
                        {
                            Id = 2,
                            AreaSize = (short)10,
                            Floor = (short)2,
                            Name = "Middle Fitness Room",
                            Number = 205
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.ScheduleWorkday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("ScheduleWorkdays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachId = 1,
                            Date = new DateTime(2022, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2022, 6, 18, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 6, 18, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CoachId = 6,
                            Date = new DateTime(2022, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2022, 6, 18, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2022, 6, 18, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.ScheduleWorkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("SheduleWorkdayId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("end")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SheduleWorkdayId");

                    b.HasIndex("WorkoutTypeId");

                    b.ToTable("ScheduleWorkouts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupId = 1,
                            RoomId = 1,
                            SheduleWorkdayId = 1,
                            WorkoutTypeId = 1,
                            end = new DateTime(2022, 6, 18, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            start = new DateTime(2022, 6, 18, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            RoomId = 1,
                            SheduleWorkdayId = 1,
                            WorkoutTypeId = 2,
                            end = new DateTime(2022, 6, 18, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            start = new DateTime(2022, 6, 18, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sexs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Individual training"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dance"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yoga"
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Main coach",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coach",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Senior gym coach",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            Name = "Manager",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 5,
                            Name = "Head manager of the hall",
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SexId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SexId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2001, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "447ceab6-5c02-4cb4-a16d-0296fe22112f",
                            EmailConfirmed = false,
                            FirstName = "Jeka",
                            LastName = "LN",
                            LockoutEnabled = false,
                            Login = "coach1",
                            MiddleName = "MN",
                            PasswordHash = new byte[] { 123, 55, 13, 51, 76, 218, 17, 53, 68, 101, 201, 173, 98, 37, 207, 86, 177, 45, 14, 21, 18, 229, 249, 37, 132, 33, 243, 238, 138, 226, 2, 89, 107, 5, 65, 244, 218, 240, 101, 40, 194, 139, 52, 43, 34, 168, 5, 223, 108, 41, 133, 191, 227, 134, 107, 93, 218, 178, 15, 237, 156, 196, 236, 135 },
                            PasswordSalt = new byte[] { 125, 208, 163, 89, 206, 129, 236, 76, 5, 222, 211, 237, 221, 210, 212, 74, 43, 200, 113, 106, 226, 126, 186, 121, 28, 11, 155, 17, 201, 145, 7, 180, 245, 37, 235, 192, 140, 92, 160, 244, 35, 25, 31, 235, 231, 18, 45, 64, 74, 71, 81, 2, 208, 229, 153, 100, 158, 10, 252, 96, 22, 124, 106, 143, 165, 111, 136, 23, 228, 35, 67, 171, 249, 163, 47, 143, 145, 62, 138, 4, 83, 157, 143, 176, 209, 110, 72, 78, 55, 104, 22, 129, 173, 225, 207, 51, 126, 237, 144, 107, 27, 66, 112, 79, 104, 133, 203, 154, 157, 132, 157, 105, 175, 60, 205, 140, 137, 142, 40, 86, 212, 73, 152, 134, 240, 72, 131, 115 },
                            PhoneNumberConfirmed = false,
                            RoleId = 2,
                            SecurityStamp = "53ac0a87-3357-4d75-a9da-9e3ce362cf90",
                            SexId = 1,
                            SpecializationId = 1,
                            StatusId = 1,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2001, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "db3257be-8da7-483f-ac19-23881b78d4e2",
                            EmailConfirmed = false,
                            FirstName = "Rose",
                            LastName = "Menders",
                            LockoutEnabled = false,
                            Login = "client1",
                            PasswordHash = new byte[] { 123, 55, 13, 51, 76, 218, 17, 53, 68, 101, 201, 173, 98, 37, 207, 86, 177, 45, 14, 21, 18, 229, 249, 37, 132, 33, 243, 238, 138, 226, 2, 89, 107, 5, 65, 244, 218, 240, 101, 40, 194, 139, 52, 43, 34, 168, 5, 223, 108, 41, 133, 191, 227, 134, 107, 93, 218, 178, 15, 237, 156, 196, 236, 135 },
                            PasswordSalt = new byte[] { 125, 208, 163, 89, 206, 129, 236, 76, 5, 222, 211, 237, 221, 210, 212, 74, 43, 200, 113, 106, 226, 126, 186, 121, 28, 11, 155, 17, 201, 145, 7, 180, 245, 37, 235, 192, 140, 92, 160, 244, 35, 25, 31, 235, 231, 18, 45, 64, 74, 71, 81, 2, 208, 229, 153, 100, 158, 10, 252, 96, 22, 124, 106, 143, 165, 111, 136, 23, 228, 35, 67, 171, 249, 163, 47, 143, 145, 62, 138, 4, 83, 157, 143, 176, 209, 110, 72, 78, 55, 104, 22, 129, 173, 225, 207, 51, 126, 237, 144, 107, 27, 66, 112, 79, 104, 133, 203, 154, 157, 132, 157, 105, 175, 60, 205, 140, 137, 142, 40, 86, 212, 73, 152, 134, 240, 72, 131, 115 },
                            PhoneNumberConfirmed = false,
                            RoleId = 1,
                            SecurityStamp = "5ed4a647-667a-4456-823b-04893470d0e5",
                            SexId = 2,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1995, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9f2cadab-160f-4f67-9cab-68440283e6bd",
                            EmailConfirmed = false,
                            FirstName = "Mike",
                            LastName = "Clark",
                            LockoutEnabled = false,
                            Login = "client2",
                            PasswordHash = new byte[] { 123, 55, 13, 51, 76, 218, 17, 53, 68, 101, 201, 173, 98, 37, 207, 86, 177, 45, 14, 21, 18, 229, 249, 37, 132, 33, 243, 238, 138, 226, 2, 89, 107, 5, 65, 244, 218, 240, 101, 40, 194, 139, 52, 43, 34, 168, 5, 223, 108, 41, 133, 191, 227, 134, 107, 93, 218, 178, 15, 237, 156, 196, 236, 135 },
                            PasswordSalt = new byte[] { 125, 208, 163, 89, 206, 129, 236, 76, 5, 222, 211, 237, 221, 210, 212, 74, 43, 200, 113, 106, 226, 126, 186, 121, 28, 11, 155, 17, 201, 145, 7, 180, 245, 37, 235, 192, 140, 92, 160, 244, 35, 25, 31, 235, 231, 18, 45, 64, 74, 71, 81, 2, 208, 229, 153, 100, 158, 10, 252, 96, 22, 124, 106, 143, 165, 111, 136, 23, 228, 35, 67, 171, 249, 163, 47, 143, 145, 62, 138, 4, 83, 157, 143, 176, 209, 110, 72, 78, 55, 104, 22, 129, 173, 225, 207, 51, 126, 237, 144, 107, 27, 66, 112, 79, 104, 133, 203, 154, 157, 132, 157, 105, 175, 60, 205, 140, 137, 142, 40, 86, 212, 73, 152, 134, 240, 72, 131, 115 },
                            PhoneNumberConfirmed = false,
                            RoleId = 1,
                            SecurityStamp = "b00b866b-a408-4ec2-bbed-54f76f98126e",
                            SexId = 1,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1995, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5d60b632-5e63-4e26-808c-a7fe83a730c5",
                            EmailConfirmed = false,
                            FirstName = "Jackson",
                            LastName = "Sweem",
                            LockoutEnabled = false,
                            Login = "client3",
                            PasswordHash = new byte[] { 123, 55, 13, 51, 76, 218, 17, 53, 68, 101, 201, 173, 98, 37, 207, 86, 177, 45, 14, 21, 18, 229, 249, 37, 132, 33, 243, 238, 138, 226, 2, 89, 107, 5, 65, 244, 218, 240, 101, 40, 194, 139, 52, 43, 34, 168, 5, 223, 108, 41, 133, 191, 227, 134, 107, 93, 218, 178, 15, 237, 156, 196, 236, 135 },
                            PasswordSalt = new byte[] { 125, 208, 163, 89, 206, 129, 236, 76, 5, 222, 211, 237, 221, 210, 212, 74, 43, 200, 113, 106, 226, 126, 186, 121, 28, 11, 155, 17, 201, 145, 7, 180, 245, 37, 235, 192, 140, 92, 160, 244, 35, 25, 31, 235, 231, 18, 45, 64, 74, 71, 81, 2, 208, 229, 153, 100, 158, 10, 252, 96, 22, 124, 106, 143, 165, 111, 136, 23, 228, 35, 67, 171, 249, 163, 47, 143, 145, 62, 138, 4, 83, 157, 143, 176, 209, 110, 72, 78, 55, 104, 22, 129, 173, 225, 207, 51, 126, 237, 144, 107, 27, 66, 112, 79, 104, 133, 203, 154, 157, 132, 157, 105, 175, 60, 205, 140, 137, 142, 40, 86, 212, 73, 152, 134, 240, 72, 131, 115 },
                            PhoneNumberConfirmed = false,
                            RoleId = 1,
                            SecurityStamp = "9750915e-93b8-47a5-9fa1-f5265f14e388",
                            SexId = 1,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1980, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "feb1c59f-5b19-46bc-b4d7-227b0d6c125f",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Cook",
                            LockoutEnabled = false,
                            Login = "admin",
                            PasswordHash = new byte[] { 123, 55, 13, 51, 76, 218, 17, 53, 68, 101, 201, 173, 98, 37, 207, 86, 177, 45, 14, 21, 18, 229, 249, 37, 132, 33, 243, 238, 138, 226, 2, 89, 107, 5, 65, 244, 218, 240, 101, 40, 194, 139, 52, 43, 34, 168, 5, 223, 108, 41, 133, 191, 227, 134, 107, 93, 218, 178, 15, 237, 156, 196, 236, 135 },
                            PasswordSalt = new byte[] { 125, 208, 163, 89, 206, 129, 236, 76, 5, 222, 211, 237, 221, 210, 212, 74, 43, 200, 113, 106, 226, 126, 186, 121, 28, 11, 155, 17, 201, 145, 7, 180, 245, 37, 235, 192, 140, 92, 160, 244, 35, 25, 31, 235, 231, 18, 45, 64, 74, 71, 81, 2, 208, 229, 153, 100, 158, 10, 252, 96, 22, 124, 106, 143, 165, 111, 136, 23, 228, 35, 67, 171, 249, 163, 47, 143, 145, 62, 138, 4, 83, 157, 143, 176, 209, 110, 72, 78, 55, 104, 22, 129, 173, 225, 207, 51, 126, 237, 144, 107, 27, 66, 112, 79, 104, 133, 203, 154, 157, 132, 157, 105, 175, 60, 205, 140, 137, 142, 40, 86, 212, 73, 152, 134, 240, 72, 131, 115 },
                            PhoneNumberConfirmed = false,
                            RoleId = 3,
                            SecurityStamp = "f6000be8-e6b9-48b5-bbd1-621c8ad99b0b",
                            SexId = 1,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "282bed1c-82a4-4545-ad98-f41eac643cfc",
                            EmailConfirmed = false,
                            FirstName = "David",
                            LastName = "DL",
                            LockoutEnabled = false,
                            Login = "coach2",
                            MiddleName = "DN",
                            PasswordHash = new byte[] { 123, 55, 13, 51, 76, 218, 17, 53, 68, 101, 201, 173, 98, 37, 207, 86, 177, 45, 14, 21, 18, 229, 249, 37, 132, 33, 243, 238, 138, 226, 2, 89, 107, 5, 65, 244, 218, 240, 101, 40, 194, 139, 52, 43, 34, 168, 5, 223, 108, 41, 133, 191, 227, 134, 107, 93, 218, 178, 15, 237, 156, 196, 236, 135 },
                            PasswordSalt = new byte[] { 125, 208, 163, 89, 206, 129, 236, 76, 5, 222, 211, 237, 221, 210, 212, 74, 43, 200, 113, 106, 226, 126, 186, 121, 28, 11, 155, 17, 201, 145, 7, 180, 245, 37, 235, 192, 140, 92, 160, 244, 35, 25, 31, 235, 231, 18, 45, 64, 74, 71, 81, 2, 208, 229, 153, 100, 158, 10, 252, 96, 22, 124, 106, 143, 165, 111, 136, 23, 228, 35, 67, 171, 249, 163, 47, 143, 145, 62, 138, 4, 83, 157, 143, 176, 209, 110, 72, 78, 55, 104, 22, 129, 173, 225, 207, 51, 126, 237, 144, 107, 27, 66, 112, 79, 104, 133, 203, 154, 157, 132, 157, 105, 175, 60, 205, 140, 137, 142, 40, 86, 212, 73, 152, 134, 240, 72, 131, 115 },
                            PhoneNumberConfirmed = false,
                            RoleId = 2,
                            SecurityStamp = "8d21b751-f38d-452f-9347-0edd9716e160",
                            SexId = 1,
                            SpecializationId = 1,
                            StatusId = 1,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models.WorkoutType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkoutTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Group Type"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Personal Type"
                        });
                });

            modelBuilder.Entity("SportAccountApi.Models._RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expired_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("SportAccountApi.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportAccountApi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportAccountApi.Models.Phone", b =>
                {
                    b.HasOne("SportAccountApi.Models.User", "User")
                        .WithMany("Phones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportAccountApi.Models.ScheduleWorkday", b =>
                {
                    b.HasOne("SportAccountApi.Models.User", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("SportAccountApi.Models.ScheduleWorkout", b =>
                {
                    b.HasOne("SportAccountApi.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("SportAccountApi.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("SportAccountApi.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportAccountApi.Models.ScheduleWorkday", "SheduleWorkday")
                        .WithMany()
                        .HasForeignKey("SheduleWorkdayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportAccountApi.Models.WorkoutType", "WorkoutType")
                        .WithMany()
                        .HasForeignKey("WorkoutTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Group");

                    b.Navigation("Room");

                    b.Navigation("SheduleWorkday");

                    b.Navigation("WorkoutType");
                });

            modelBuilder.Entity("SportAccountApi.Models.Status", b =>
                {
                    b.HasOne("SportAccountApi.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SportAccountApi.Models.User", b =>
                {
                    b.HasOne("SportAccountApi.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportAccountApi.Models.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportAccountApi.Models.Specialization", "Specialization")
                        .WithMany("Users")
                        .HasForeignKey("SpecializationId");

                    b.HasOne("SportAccountApi.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Role");

                    b.Navigation("Sex");

                    b.Navigation("Specialization");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SportAccountApi.Models._RefreshToken", b =>
                {
                    b.HasOne("SportAccountApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportAccountApi.Models.Specialization", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SportAccountApi.Models.User", b =>
                {
                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
